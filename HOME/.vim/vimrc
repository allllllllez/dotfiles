"==============================================================================
" Vim-plug settings
"==============================================================================

" Plugins will be downloaded under the specified directory.
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

" Declare the list of plugins.
" デフォルト設定をまるっと変更する cf. https://github.com/tpope/vim-sensible
Plug 'tpope/vim-sensible'
" low-contrast Vim color scheme based on Seoul Colors
Plug 'junegunn/seoul256.vim'

" denops： Deno で Vim/Neovim プラグインを開発するためのエコシステム
Plug 'vim-denops/denops.vim'
Plug 'vim-denops/denops-helloworld.vim'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

"==============================================================================
" Settings
"==============================================================================

" スワップファイルを作らない
set noswapfile
" 集中のファイルが変更されたら自動で読み直す
set autoread
" バッファが編集中でもその他のファイルを開けるように
set hidden
" 入力中のコマンドをステータスに表示する
set showcmd

"
" Appearance
"
" カラースキーム（ベース。後の設定でちょっと改造する）
" colorscheme murphy
" colorscheme slate
colorscheme molokai
" 行番号を表示
set number
" 現在の行を強調表示
set cursorline
" 現在の行を強調表示（縦）
" set cursorcolumn
" インデントはスマートインデント
set smartindent
" ビープ音を可視化
set visualbell
" 括弧入力時の対応する括弧を表示
set showmatch
" ステータスラインを常に表示
set laststatus=2
" " コマンドラインの補完
set wildmode=list:longest
" 折り返し時に表示行単位での移動できるようにする
nnoremap j gj
nnoremap k gk
" シンタックスハイライトの有効化
syntax enable

"
" Tab
"
" 不可視文字を可視化(タブが「>---」、スペースが「-」と表示される)
set list listchars=tab:>.,space:-
" 改行の色を変える
hi NonText ctermfg=59
" タブの色を変える
hi SpecialKey ctermfg=59
" Tab文字を半角スペースにする
" set expandtab
" 行頭以外のTab文字の表示幅（スペースいくつ分）
set tabstop=4
" 行頭でのTab文字の表示幅
set shiftwidth=4

"
" Search
"
" 検索文字列が小文字の場合は大文字小文字を区別なく検索する
set ignorecase
" 検索文字列に大文字が含まれている場合は区別して検索する
set smartcase
" 検索文字列入力時に順次対象文字列にヒットさせる
set incsearch
" 検索時に最後まで行ったら最初に戻る
set wrapscan
" 検索語をハイライト表示
set hlsearch
" ESC連打でハイライト解除
nmap <Esc><Esc> :nohlsearch<CR><Esc>

inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

" autoload フォルダ配下をロード
" cf. https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"==============================================================================
" dpp.vim
"==============================================================================

let $CACHE = expand('~/.cache')
if !($CACHE->isdirectory())
  call mkdir($CACHE, 'p')
endif

for s:plugin in [
      \ 'Shougo/dpp.vim',
      \ 'vim-denops/denops.vim',
      \ ]->filter({ _, val ->
      \           &runtimepath !~# '/' .. val->fnamemodify(':t') })
  " Search from current directory
  let s:dir = s:plugin->fnamemodify(':t')->fnamemodify(':p')
  if !(s:dir->isdirectory())
    " Search from $CACHE directory
    let s:dir = $CACHE .. '/dpp/repos/github.com/' .. s:plugin
    if !(s:dir->isdirectory())
      execute '!git clone https://github.com/' .. s:plugin s:dir
    endif
  endif

  if s:plugin->fnamemodify(':t') ==# 'dpp.vim'
    execute 'set runtimepath^='
          \ .. s:dir->fnamemodify(':p')->substitute('[/\\]$', '', '')
  endif
endfor

